<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="risk.engine.db.dao.BlockchainBlockMapper">
  <resultMap id="BaseResultMap" type="risk.engine.db.entity.BlockchainBlock">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="hash" jdbcType="VARCHAR" property="hash" />
    <result column="height" jdbcType="INTEGER" property="height" />
    <result column="version" jdbcType="INTEGER" property="version" />
    <result column="timestamp" jdbcType="BIGINT" property="timestamp" />
    <result column="tx_count" jdbcType="INTEGER" property="txCount" />
    <result column="size" jdbcType="INTEGER" property="size" />
    <result column="weight" jdbcType="INTEGER" property="weight" />
    <result column="merkle_root" jdbcType="VARCHAR" property="merkleRoot" />
    <result column="previous_block_hash" jdbcType="VARCHAR" property="previousBlockHash" />
    <result column="median_time" jdbcType="BIGINT" property="medianTime" />
    <result column="nonce" jdbcType="BIGINT" property="nonce" />
    <result column="bits" jdbcType="INTEGER" property="bits" />
    <result column="difficulty" jdbcType="BIGINT" property="difficulty" />
    <result column="coin" jdbcType="VARCHAR" property="coin" />
    <result column="chain" jdbcType="VARCHAR" property="chain" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, hash, height, version, timestamp, tx_count, size, weight, merkle_root, previous_block_hash, 
    median_time, nonce, bits, difficulty, coin, chain, create_time
  </sql>
  <select id="selectByExample" parameterType="risk.engine.db.entity.BlockchainBlock" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from blockchain_block
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Mar 13 19:43:57 CST 2025.
    -->
    select 
    <include refid="Base_Column_List" />
    from blockchain_block
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Mar 13 19:43:57 CST 2025.
    -->
    delete from blockchain_block
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="risk.engine.db.entity.BlockchainBlock">
    insert into blockchain_block (id, hash, height, 
      version, timestamp, tx_count, 
      size, weight, merkle_root, 
      previous_block_hash, median_time, nonce, 
      bits, difficulty, coin, 
      chain, create_time)
    values (#{id,jdbcType=BIGINT}, #{hash,jdbcType=VARCHAR}, #{height,jdbcType=INTEGER}, 
      #{version,jdbcType=INTEGER}, #{timestamp,jdbcType=BIGINT}, #{txCount,jdbcType=INTEGER}, 
      #{size,jdbcType=INTEGER}, #{weight,jdbcType=INTEGER}, #{merkleRoot,jdbcType=VARCHAR}, 
      #{previousBlockHash,jdbcType=VARCHAR}, #{medianTime,jdbcType=BIGINT}, #{nonce,jdbcType=BIGINT}, 
      #{bits,jdbcType=INTEGER}, #{difficulty,jdbcType=BIGINT}, #{coin,jdbcType=VARCHAR}, 
      #{chain,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <update id="updateByPrimaryKey" parameterType="risk.engine.db.entity.BlockchainBlock">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Mar 13 19:43:57 CST 2025.
    -->
    update blockchain_block
    set hash = #{hash,jdbcType=VARCHAR},
      height = #{height,jdbcType=INTEGER},
      version = #{version,jdbcType=INTEGER},
      timestamp = #{timestamp,jdbcType=BIGINT},
      tx_count = #{txCount,jdbcType=INTEGER},
      size = #{size,jdbcType=INTEGER},
      weight = #{weight,jdbcType=INTEGER},
      merkle_root = #{merkleRoot,jdbcType=VARCHAR},
      previous_block_hash = #{previousBlockHash,jdbcType=VARCHAR},
      median_time = #{medianTime,jdbcType=BIGINT},
      nonce = #{nonce,jdbcType=BIGINT},
      bits = #{bits,jdbcType=INTEGER},
      difficulty = #{difficulty,jdbcType=BIGINT},
      coin = #{coin,jdbcType=VARCHAR},
      chain = #{chain,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>